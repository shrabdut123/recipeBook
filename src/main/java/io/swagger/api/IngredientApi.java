/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.model.Ingredient;
import io.swagger.model.IngredientListResponse;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-11-17T22:44:18.369Z")

@Api(value = "ingredient", description = "the ingredient API")
public interface IngredientApi {

    @ApiOperation(value = "Adds a new Ingredient", nickname = "addIngredient", notes = "", response = Ingredient.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Ingredient.class),
        @ApiResponse(code = 404, message = "fail", response = Ingredient.class) })
    @RequestMapping(value = "/ingredient",
        method = RequestMethod.POST)
    ResponseEntity<Ingredient> addIngredient(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Ingredient ingredient);


    @ApiOperation(value = "Gets all Ingredients", nickname = "getAllIngredient", notes = "", response = IngredientListResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = IngredientListResponse.class),
        @ApiResponse(code = 404, message = "fail", response = Ingredient.class) })
    @RequestMapping(value = "/ingredient",
        method = RequestMethod.GET)
    ResponseEntity<IngredientListResponse> getAllIngredient(@ApiParam(value = "search keyword.") @Valid @RequestParam(value = "q", required = false) String q);


    @ApiOperation(value = "Gets a Ingredient by ID.", nickname = "getIngredient", notes = "", response = Ingredient.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Ingredient.class),
        @ApiResponse(code = 404, message = "fail", response = Ingredient.class) })
    @RequestMapping(value = "/ingredient/{ingredient_id}",
        method = RequestMethod.GET)
    ResponseEntity<Ingredient> getIngredient(@ApiParam(value = "The ingredient ID.",required=true) @PathVariable("ingredient_id") Integer ingredientId);


    @ApiOperation(value = "Updates a Ingredient by ID.", nickname = "updateIngredient", notes = "", response = Ingredient.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Ingredient.class),
        @ApiResponse(code = 404, message = "fail", response = Ingredient.class) })
    @RequestMapping(value = "/ingredient/{ingredient_id}",
        method = RequestMethod.PUT)
    ResponseEntity<Ingredient> updateIngredient(@ApiParam(value = "The ingredient ID.",required=true) @PathVariable("ingredient_id") Integer ingredientId,@ApiParam(value = ""  )  @Valid @RequestBody Ingredient ingredient);

}
