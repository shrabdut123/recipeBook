/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.model.CompleteRecipe;
import io.swagger.model.CompleteRecipeList;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-11-17T22:44:18.369Z")

@Api(value = "recipe", description = "the recipe API")
public interface RecipeApi {

    @ApiOperation(value = "Adds a new recipe", nickname = "addRecipe", notes = "", response = CompleteRecipe.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = CompleteRecipe.class),
        @ApiResponse(code = 404, message = "fail", response = CompleteRecipe.class) })
    @RequestMapping(value = "/recipe",
        method = RequestMethod.POST)
    ResponseEntity<CompleteRecipe> addRecipe(@ApiParam(value = "" ,required=true )  @Valid @RequestBody CompleteRecipe recipe);


    @ApiOperation(value = "Gets a recipe by ID.", nickname = "getRecipe", notes = "", response = CompleteRecipe.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = CompleteRecipe.class),
        @ApiResponse(code = 404, message = "fail", response = CompleteRecipe.class) })
    @RequestMapping(value = "/recipe/{recipe_id}",
        method = RequestMethod.GET)
    ResponseEntity<CompleteRecipe> getRecipe(@ApiParam(value = "Number of people.") @Valid @RequestParam(value = "p", required = false) Integer p,@ApiParam(value = "The recipe ID.",required=true) @PathVariable("recipe_id") Integer recipeId);


    @ApiOperation(value = "Gets a recipe by name.", nickname = "getRecipeByName", notes = "", response = CompleteRecipeList.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = CompleteRecipeList.class),
        @ApiResponse(code = 404, message = "fail", response = CompleteRecipe.class) })
    @RequestMapping(value = "/recipe",
        method = RequestMethod.GET)
    ResponseEntity<CompleteRecipeList> getRecipeByName(@ApiParam(value = "search keyword.") @Valid @RequestParam(value = "q", required = false) String q);


    @ApiOperation(value = "Updates a recipe by ID.", nickname = "updateRecipe", notes = "", response = CompleteRecipe.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = CompleteRecipe.class),
        @ApiResponse(code = 404, message = "fail", response = CompleteRecipe.class) })
    @RequestMapping(value = "/recipe/{recipe_id}",
        method = RequestMethod.PUT)
    ResponseEntity<CompleteRecipe> updateRecipe(@ApiParam(value = "The recipe ID.",required=true) @PathVariable("recipe_id") Integer recipeId,@ApiParam(value = ""  )  @Valid @RequestBody CompleteRecipe recipe);

}
